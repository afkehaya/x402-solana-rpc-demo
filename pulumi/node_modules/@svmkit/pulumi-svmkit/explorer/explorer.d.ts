import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
export declare class Explorer extends pulumi.CustomResource {
    /**
     * Get an existing Explorer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Explorer;
    /**
     * Returns true if the given object is an instance of Explorer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Explorer;
    readonly RPCURL: pulumi.Output<string | undefined>;
    readonly clusterName: pulumi.Output<string | undefined>;
    readonly connection: pulumi.Output<outputs.ssh.Connection>;
    readonly environment: pulumi.Output<outputs.solana.Environment>;
    readonly flags: pulumi.Output<outputs.explorer.ExplorerFlags>;
    readonly name: pulumi.Output<string | undefined>;
    readonly runnerConfig: pulumi.Output<outputs.runner.Config | undefined>;
    readonly symbol: pulumi.Output<string | undefined>;
    readonly version: pulumi.Output<string | undefined>;
    /**
     * Create a Explorer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExplorerArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Explorer resource.
 */
export interface ExplorerArgs {
    RPCURL?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    connection: pulumi.Input<inputs.ssh.ConnectionArgs>;
    environment: pulumi.Input<inputs.solana.EnvironmentArgs>;
    flags: pulumi.Input<inputs.explorer.ExplorerFlagsArgs>;
    name?: pulumi.Input<string>;
    runnerConfig?: pulumi.Input<inputs.runner.ConfigArgs>;
    symbol?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}
