import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
export declare class Faucet extends pulumi.CustomResource {
    /**
     * Get an existing Faucet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Faucet;
    /**
     * Returns true if the given object is an instance of Faucet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Faucet;
    readonly connection: pulumi.Output<outputs.ssh.Connection>;
    readonly flags: pulumi.Output<outputs.faucet.FaucetFlags>;
    readonly keypair: pulumi.Output<string>;
    readonly runnerConfig: pulumi.Output<outputs.runner.Config | undefined>;
    readonly version: pulumi.Output<string | undefined>;
    /**
     * Create a Faucet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FaucetArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Faucet resource.
 */
export interface FaucetArgs {
    connection: pulumi.Input<inputs.ssh.ConnectionArgs>;
    flags: pulumi.Input<inputs.faucet.FaucetFlagsArgs>;
    keypair: pulumi.Input<string>;
    runnerConfig?: pulumi.Input<inputs.runner.ConfigArgs>;
    version?: pulumi.Input<string>;
}
