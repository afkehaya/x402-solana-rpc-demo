import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
export declare class StakeAccount extends pulumi.CustomResource {
    /**
     * Get an existing StakeAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): StakeAccount;
    /**
     * Returns true if the given object is an instance of StakeAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is StakeAccount;
    readonly amount: pulumi.Output<number>;
    readonly connection: pulumi.Output<outputs.ssh.Connection>;
    readonly keyPairs: pulumi.Output<outputs.solana.StakeAccountKeyPairs>;
    readonly transactionOptions: pulumi.Output<outputs.solana.TxnOptions>;
    /**
     * Create a StakeAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StakeAccountArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a StakeAccount resource.
 */
export interface StakeAccountArgs {
    amount: pulumi.Input<number>;
    connection: pulumi.Input<inputs.ssh.ConnectionArgs>;
    keyPairs: pulumi.Input<inputs.solana.StakeAccountKeyPairsArgs>;
    transactionOptions: pulumi.Input<inputs.solana.TxnOptionsArgs>;
}
