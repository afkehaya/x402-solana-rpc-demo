"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Solana = void 0;
const pulumi = require("@pulumi/pulumi");
const inputs = require("../types/input");
const utilities = require("../utilities");
class Solana extends pulumi.CustomResource {
    /**
     * Get an existing Solana resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Solana(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Solana.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Solana.__pulumiType;
    }
    /**
     * Create a Solana resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.connection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connection'");
            }
            if ((!args || args.flags === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flags'");
            }
            if ((!args || args.primordial === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primordial'");
            }
            resourceInputs["accounts"] = args ? args.accounts : undefined;
            resourceInputs["connection"] = args ? (args.connection ? pulumi.output(args.connection).apply(inputs.ssh.connectionArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["flags"] = args ? args.flags : undefined;
            resourceInputs["primordial"] = args ? args.primordial : undefined;
            resourceInputs["runnerConfig"] = args ? args.runnerConfig : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["genesisHash"] = undefined /*out*/;
        }
        else {
            resourceInputs["accounts"] = undefined /*out*/;
            resourceInputs["connection"] = undefined /*out*/;
            resourceInputs["flags"] = undefined /*out*/;
            resourceInputs["genesisHash"] = undefined /*out*/;
            resourceInputs["primordial"] = undefined /*out*/;
            resourceInputs["runnerConfig"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Solana.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Solana = Solana;
/** @internal */
Solana.__pulumiType = 'svmkit:genesis:Solana';
//# sourceMappingURL=solana.js.map